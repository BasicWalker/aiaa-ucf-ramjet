% ------ SFRJ Internal Ballistic Simulator / UCF CAPSTONE PROJECT ------ %
% File Name: Gas.m 
% 
% File Description: 
% Gas model, calculates combustion chamber pressure and air mass
% properties
% 
% Name            Date      SCR  Description
% --------------  --------  ---  ------------------------------
% Ethan Sherlock  01/22/21  000  Initial Creation 
% Ethan Sherlock  02/14/21  001  Chamber Pressure Calculation Update
% ---------------------------------------------------------------------- %

% Set Inlet velocity and pressure
% InltVel(n) = InltVel(1);
% InltPres(n) = InltPres(1);
% InltPres_stag(n) = InltPres_stag(1);

f(n) = MFuelGen(n) / SFRJDt;        % 

% Chamber pressure (PC) based on Austins reverse nozzle area calculations
% PC(n) = (3/(121*(NzlAT^2))) * ((20*sqrt(5))*sqrt(121*(NzlAT^2)*(InltArea^2)*InltRho(1)*InltPres(n)...
%       - 33*NzlAT*f(n)*(InltArea^2)*InltRho(1) + 4500*(InltArea^4)*InltRho(1)^2) ...
%       + 11*NzlAT*f(n) - 3000*(InltArea^2)*InltRho(1));
   

% Calculate air velocity after sudden expansion inside the chamber 
% AirVel(n) = InltVel(n) * (InltArea/PortArea(n));                    % Velocity of air 

% Keep track of altitude
if (n > 1)
    altitude(n) = altitude(n-1) + velocity(n-1)*SFRJDt + 0.5*acceleration(n-1)*SFRJDt^2;
end

% % Interpolated Lookup Tables - Atm values
% pressure_atm(n) = interp1(GRAM.Hgtkm, GRAM.PresMean, (altitude(n))/1e3);
% pressure_atm(n) = pressure_atm(n)*(1/Pa2kPa);
% Temp_atm(n) = interp1(GRAM.Hgtkm, GRAM.Tmean, (altitude(n))/1e3);
% Rho_atm(n) = interp1(GRAM.Hgtkm, GRAM.DensMean, (altitude(n))/1e3);

% Intake                                                              % Call Intake Model

InltMassFlw(n) = m_dot(n);                                          % Mdot from Intake Model

% Calculate air mass properties
MairGen(n) = InltMassFlw(n)*SFRJDt;                                 % Mass of air generated (kg)
MOxdzrGen(n) = MairGen(n) * 0.2314;                                 % Mass of oxygen generated by weight % (kg)        
MdotAir(n) = InltMassFlw(n);                                        % Air mass flow rate (kg/s)
MdotTotal(n) = MdotAir(n) + MdotFuel(n);                            % Total mass flow (kg/s)

f_yield(n) = (MFuelGen(n)/MairGen(n));                              % fuel to air ratio 

% --------------------- Chemistry Model --------------------- %
% [phi,gamma_nzl, T_AFT] = Chemistry(f_yield(n));                   % Call Chemistry Model
[phi, T_AFT] = chem.phiSolver(f_yield(n),475);                      % need to add T_air before combustion chamber 475
T_stag(n) = T_AFT;                                                  % Stagnation temp in nozzle
gamma_nzl = 1.3845;  % temp
gamma_nzlT(n) = gamma_nzl;                                          % Gamma at the nozzle throat
phi_eqv(n) = phi;
% ----------------------------------------------------------- %

% Required chamber pressure for exit Mach = 2 
[mach, T, P, rho, area] = flowisentropic(gamma_nzlT(n), 1.7 ,'sup');
PCreq(n) = (1/P)*pressure_atm(n);                                   % Calculates Stag Pres based on Pressure ratio, assumes Pstag = PC
Temp_exit(n) = T*T_AFT;
Mach_exit(n) = mach;

% Chamber Pressure based on adiabatic flame temp
[mach, T, P, rho, area] = flowisentropic(1.321, 1 ,'mach');         % Isentropic flow conditions at nozzle throat
T_static(n)	= T*T_stag(n);                                          % Find static temp (K)
V_soundNzlT(n) = sqrt(gamma_nzl*R*T_static(n));                     % Speed of sound at nozzle throat (m/s)
V_flowRate(n) = mach * V_soundNzlT(n);                              % Flow velocity at nozzle throat (m/s)
Rho_static(n) = MdotTotal(n)/(V_flowRate(n) * NzlAT);               % Static density at nozzle throat (kg/m^3)
Rho_stag(n) = (1/rho)*Rho_static(n);                                % Stagnation density at nozzle throat (kg/m^3)
PC_TAFT(n) = Rho_stag(n)*R*T_stag(n) * (1/Pa2kPa);                  % Stagnation pressure = chamber pressure (kPa)
